---
# kubectl apply -f kse-composer.yml
# zookeeper-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: zookeeper
spec:
    replicas: 1
    selector:
        matchLabels:
            app: zookeeper
    template:
        metadata:
            labels:
                app: zookeeper
        spec:
            containers:
                - name: zookeeper
                  image: bitnami/zookeeper:latest
                  ports:
                      - containerPort: 2181
                  resources:
                      requests:
                          memory: "256Mi"
                          cpu: "100m"
                      limits:
                          memory: "512Mi"
                          cpu: "200m"
                  env:
                      - name: ALLOW_ANONYMOUS_LOGIN
                        value: "yes"
---
# zookeeper-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: zookeeper
spec:
    selector:
        app: zookeeper
    ports:
        - port: 2181
          targetPort: 2181
---
# kafka-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: kafka
spec:
    replicas: 1
    selector:
        matchLabels:
            app: kafka
    template:
        metadata:
            labels:
                app: kafka
        spec:
            containers:
                - name: kafka
                  image: bitnami/kafka:3.3.2
                  ports:
                      - containerPort: 9092
                      - containerPort: 29092
                      - containerPort: 9093
                  resources:
                      requests:
                          memory: "512Mi"
                          cpu: "200m"
                      limits:
                          memory: "1Gi"
                          cpu: "500m"
                  env:
                      - name: BITNAMI_DEBUG
                        value: "true"
                      - name: KAFKA_CFG_NODE_ID
                        value: "1"
                      - name: KAFKA_CFG_PROCESS_ROLES
                        value: "broker,controller"
                      - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
                        value: "1@127.0.0.1:9093"
                      - name: KAFKA_CFG_LISTENERS
                        value: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092"
                      - name: KAFKA_CFG_ADVERTISED_LISTENERS
                        value: "PLAINTEXT://kafka:9092,EXTERNAL://kafka-external:29092"
                      - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
                        value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
                      - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
                        value: "CONTROLLER"
                      - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
                        value: "PLAINTEXT"
                      - name: ALLOW_PLAINTEXT_LISTENER
                        value: "yes"
                      - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
                        value: "true"
            # Add volumes
            volumes:
                - name: kafka-configmaps
                  configMap:
                      name: kafka-controller-configuration
---
# kafka-service-internal.yaml
apiVersion: v1
kind: Service
metadata:
    name: kafka
spec:
    selector:
        app: kafka
    ports:
        - port: 9092
          targetPort: 9092
---
# kafka-service-external.yaml
apiVersion: v1
kind: Service
metadata:
    name: kafka-external
spec:
    type: LoadBalancer
    selector:
        app: kafka
    ports:
        - port: 29092
          targetPort: 29092
---
# kafka-ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: kafka-ui
spec:
    replicas: 1
    selector:
        matchLabels:
            app: kafka-ui
    template:
        metadata:
            labels:
                app: kafka-ui
        spec:
            containers:
                - name: kafka-ui
                  image: provectuslabs/kafka-ui:latest
                  ports:
                      - containerPort: 8080
                  resources:
                      requests:
                          memory: "256Mi"
                          cpu: "100m"
                      limits:
                          memory: "512Mi"
                          cpu: "200m"
                  env:
                      - name: KAFKA_CLUSTERS_0_NAME
                        value: "local"
                      - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
                        value: "kafka:9092"
                      - name: DYNAMIC_CONFIG_ENABLED
                        value: "true"
---
# kafka-ui-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: kafka-ui
spec:
    type: LoadBalancer
    selector:
        app: kafka-ui
    ports:
        - port: 8080
          targetPort: 8080
---
# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: postgres
spec:
    replicas: 1
    selector:
        matchLabels:
            app: postgres
    template:
        metadata:
            labels:
                app: postgres
        spec:
            containers:
                - name: postgres
                  image: postgres:16.0-alpine
                  ports:
                      - containerPort: 5432
                  resources:
                      requests:
                          memory: "256Mi"
                          cpu: "100m"
                      limits:
                          memory: "512Mi"
                          cpu: "300m"
                  env:
                      - name: POSTGRES_USER
                        value: "able"
                      - name: POSTGRES_PASSWORD
                        value: "able"
                      - name: POSTGRES_DB
                        value: "able"
                  volumeMounts:
                      - name: postgres-data
                        mountPath: /var/lib/postgresql/data
            volumes:
                - name: postgres-data
                  persistentVolumeClaim:
                      claimName: postgres-pvc
---
# postgres-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: postgres-pvc
spec:
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 1Gi
    storageClassName: standard
---
# postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: postgres
spec:
    selector:
        app: postgres
    ports:
        - port: 5432
          targetPort: 5432
---
# postgres-service-external.yaml
apiVersion: v1
kind: Service
metadata:
    name: postgres-external
spec:
    type: LoadBalancer
    selector:
        app: postgres
    ports:
        - port: 5411
          targetPort: 5432
---
# redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: redis
spec:
    replicas: 1
    selector:
        matchLabels:
            app: redis
    template:
        metadata:
            labels:
                app: redis
        spec:
            containers:
                - name: redis
                  image: redis:alpine
                  command: ["redis-server", "--requirepass", "able"]
                  ports:
                      - containerPort: 6379
                  resources:
                      requests:
                          memory: "128Mi"
                          cpu: "100m"
                      limits:
                          memory: "256Mi"
                          cpu: "200m"
---
# redis-service.yaml
apiVersion: v1
kind: Service
metadata:
    name: redis
spec:
    selector:
        app: redis
    ports:
        - port: 6379
          targetPort: 6379
---
# redis-service-external.yaml
apiVersion: v1
kind: Service
metadata:
    name: redis-external
spec:
    type: LoadBalancer
    selector:
        app: redis
    ports:
        - port: 6379
          targetPort: 6379
